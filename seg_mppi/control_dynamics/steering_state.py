import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import least_squares

# 1. Parse the user-provided coordinate data
data_str = """
(133.26980590820312, -89.53335571289062)
(133.23910522460938, -89.78064727783203)
(133.19546508789062, -90.0329818725586)
(133.134033203125, -90.28713989257812)
(133.05508422851562, -90.5418930053711)
(132.95811462402344, -90.79552459716797)
(132.84104919433594, -91.04454803466797)
(132.7040557861328, -91.28702545166016)
(132.54766845703125, -91.51994323730469)
(132.376220703125, -91.73236846923828)
(132.18890380859375, -91.93135833740234)
(131.98155212402344, -92.10234069824219)
(131.7565155029297, -92.24105072021484)
(131.52117919921875, -92.36473083496094)
(131.27813720703125, -92.47188568115234)
(131.02517700195312, -92.55928039550781)
(130.7641143798828, -92.6285171508789)
(130.4967498779297, -92.67631530761719)
(130.22476196289062, -92.70237731933594)
(129.9501190185547, -92.70641326904297)
(129.67535400390625, -92.68627166748047)
(129.40127563476562, -92.64383697509766)
(129.13189697265625, -92.57671356201172)
(128.86744689941406, -92.48731994628906)
(128.6122283935547, -92.37415313720703)
(128.3662872314453, -92.23946380615234)
(128.1336669921875, -92.08293914794922)
(127.91454315185547, -91.90658569335938)
(127.71240234375, -91.71109008789062)
(127.52751159667969, -91.49832916259766)
(127.36524200439453, -91.27971649169922)
(127.22199249267578, -91.048828125)
(127.08991241455078, -90.80631256103516)
(126.96758270263672, -90.55098724365234)
(126.86325073242188, -90.28414154052734)
(126.79215240478516, -90.01089477539062)
(126.74674224853516, -89.73406982421875)
(126.72230529785156, -89.45783233642578)
(126.72559356689453, -89.18370819091797)
(126.7544174194336, -88.91230010986328)
(126.8064956665039, -88.64566040039062)
(126.8902816772461, -88.3967056274414)
(127.00653839111328, -88.17105865478516)
(127.14163970947266, -87.9547348022461)
(127.29181671142578, -87.74951171875)
(127.45921325683594, -87.55471801757812)
(127.64495849609375, -87.37596130371094)
(127.84638214111328, -87.21012878417969)
(128.06292724609375, -87.06241607666016)
(128.29290771484375, -86.93225860595703)
(128.53465270996094, -86.82110595703125)
(128.78648376464844, -86.73104858398438)
(129.04664611816406, -86.66173553466797)
(129.31304931640625, -86.61526489257812)
(129.5838623046875, -86.5913314819336)
(129.8568115234375, -86.59105682373047)
(130.12989807128906, -86.61436462402344)
(130.40093994140625, -86.66140747070312)
(130.6676025390625, -86.73214721679688)
(130.92803955078125, -86.82601165771484)
(131.17967224121094, -86.9427719116211)
(131.42100524902344, -87.08129119873047)
(131.6492919921875, -87.24100494384766)
(131.86346435546875, -87.42040252685547)
(132.060791015625, -87.61845397949219)
(132.24058532714844, -87.83344268798828)
(132.40028381347656, -88.06385803222656)
(132.53955078125, -88.3078384399414)
(132.6558837890625, -88.56214904785156)
(132.73944091796875, -88.8164291381836)
(132.77403259277344, -89.06822967529297)
(132.76336669921875, -89.31623840332031)
(132.72259521484375, -89.56233215332031)
(132.67079162597656, -89.81334686279297)
(132.60154724121094, -90.0656509399414)
(132.51446533203125, -90.31771087646484)
(132.40902709960938, -90.5676498413086)
(132.28305053710938, -90.81149291992188)
(132.1376953125, -91.04845428466797)
(131.97232055664062, -91.27490234375)
(131.78993225097656, -91.48603057861328)
(131.59341430664062, -91.6693344116211)
(131.3761749267578, -91.81277465820312)
(131.1433563232422, -91.92957305908203)
(130.89871215820312, -92.02290344238281)
(130.644775390625, -92.10051727294922)
(130.38568115234375, -92.16556549072266)
(130.12063598632812, -92.21127319335938)
(129.8501434326172, -92.23722076416016)
(129.57618713378906, -92.2439193725586)
(129.30128479003906, -92.2273941040039)
(129.02651977539062, -92.18994903564453)
(128.75521850585938, -92.12883758544922)
(128.48866271972656, -92.04518127441406)
(128.22930908203125, -91.93907165527344)
(127.98001098632812, -91.81024169921875)
(127.74137878417969, -91.6604232788086)
(127.51747131347656, -91.48953247070312)
(127.3079833984375, -91.29985046386719)
(127.11451721191406, -91.09339904785156)
(126.93048858642578, -90.8731689453125)
(126.75641632080078, -90.63848876953125)
(126.59383392333984, -90.38883209228516)
(126.45338439941406, -90.12496185302734)
(126.34894561767578, -89.85227966308594)
(126.27075958251953, -89.5748062133789)
(126.21670532226562, -89.2953109741211)
(126.19615936279297, -89.01934814453125)
(126.21036529541016, -88.75220489501953)
(126.26041412353516, -88.50381469726562)
(126.34580993652344, -88.27835083007812)
(126.46142578125, -88.06949615478516)
(126.59276580810547, -87.86711883544922)
(126.73799896240234, -87.67096710205078)
(126.90058898925781, -87.484130859375)
(127.07793426513672, -87.30522155761719)
(127.27108764648438, -87.13912963867188)
(127.478515625, -86.98540496826172)
(127.69942474365234, -86.84722137451172)
(127.9329833984375, -86.72562408447266)
(128.17755126953125, -86.62183380126953)
(128.43179321289062, -86.53805541992188)
(128.6940155029297, -86.47441864013672)
(128.9622039794922, -86.43301391601562)
(129.23458862304688, -86.41368865966797)
(129.50885009765625, -86.4178237915039)
(129.78305053710938, -86.4451904296875)
(130.05487060546875, -86.49632263183594)
(130.32212829589844, -86.57091522216797)
(130.5827178955078, -86.668701171875)
(130.83428955078125, -86.78919982910156)
(131.07504272460938, -86.93148040771484)
(131.302490234375, -87.09477996826172)
(131.5153045654297, -87.27770233154297)
(131.7110137939453, -87.47907257080078)
(131.888671875, -87.69720458984375)
(132.0459442138672, -87.93050384521484)
(132.18238830566406, -88.17710876464844)
(132.29592895507812, -88.43498229980469)
(132.3827667236328, -88.69546508789062)
(132.42514038085938, -88.9513931274414)
(132.4188232421875, -89.20143127441406)
(132.37969970703125, -89.44998931884766)
(132.32791137695312, -89.7057113647461)
(132.25892639160156, -89.9629898071289)
(132.17105102539062, -90.21908569335938)
(132.06297302246094, -90.4713134765625)
(131.93507385253906, -90.71800231933594)
(131.78663635253906, -90.95599365234375)
(131.6180877685547, -91.18294525146484)
(131.4317169189453, -91.39552307128906)
(131.23216247558594, -91.58032989501953)
(131.0133514404297, -91.72540283203125)
(130.77847290039062, -91.83125305175781)
(130.531982421875, -91.91407012939453)
(130.27545166015625, -91.98558044433594)
(130.01278686523438, -92.04122924804688)
(129.74609375, -92.08041381835938)
(129.47471618652344, -92.09852600097656)
(129.19961547851562, -92.09829711914062)
(128.92410278320312, -92.0751953125)
(128.64871215820312, -92.03096008300781)
(128.3770751953125, -91.96337890625)
(128.1104278564453, -91.87340545654297)
(127.85175323486328, -91.76063537597656)
(127.60289764404297, -91.6258316040039)
(127.36624908447266, -91.46968841552734)
(127.14385223388672, -91.29315185546875)
(126.93646240234375, -91.09862518310547)
(126.73999786376953, -90.88921356201172)
(126.55397033691406, -90.66510772705078)
(126.37842559814453, -90.42585754394531)
(126.21809387207031, -90.17108154296875)
(126.09237670898438, -89.90455627441406)
(125.99658966064453, -89.63058471679688)
(125.92311096191406, -89.35340118408203)
(125.87992858886719, -89.07540130615234)
(125.87533569335938, -88.80780029296875)
(125.91187286376953, -88.55986022949219)
(125.98758697509766, -88.334716796875)
(126.0976791381836, -88.12810516357422)
(126.22801208496094, -87.92925262451172)
(126.37019348144531, -87.73580169677734)
(126.52640533447266, -87.54888916015625)
(126.69818115234375, -87.36956024169922)
(126.8835220336914, -87.1988296508789)
(127.08401489257812, -87.04039001464844)
(127.2974624633789, -86.89411163330078)
(127.52385711669922, -86.76371002197266)
(127.761962890625, -86.64962005615234)
(128.0102996826172, -86.55343627929688)
(128.267578125, -86.47766876220703)
(128.5323944091797, -86.42144012451172)
(128.80226135253906, -86.38829040527344)
(129.07611083984375, -86.37638854980469)
(129.35061645507812, -86.38888549804688)
(129.62503051757812, -86.42377471923828)
(129.89564514160156, -86.483154296875)
(130.16172790527344, -86.56521606445312)
(130.41964721679688, -86.67092895507812)
(130.66860961914062, -86.79861450195312)
(130.90525817871094, -86.9482421875)
(131.12876892089844, -87.11817932128906)
(131.33619689941406, -87.3075942993164)
(131.52670288085938, -87.51481628417969)
(131.6978302001953, -87.7383804321289)
(131.848876953125, -87.97649383544922)
(131.97784423828125, -88.22724914550781)
(132.0841827392578, -88.48828125)
(132.16087341308594, -88.74922180175781)
(132.19033813476562, -89.00475311279297)
(132.1725616455078, -89.25354766845703)
(132.12228393554688, -89.49800109863281)
(132.05953979492188, -89.74638366699219)
(131.9796142578125, -89.99544525146484)
(131.8811798095703, -90.2428970336914)
(131.76467895507812, -90.487548828125)
(131.6278839111328, -90.72508239746094)
(131.47190856933594, -90.95464324951172)
(131.29653930664062, -91.17294311523438)
(131.10374450683594, -91.3759994506836)
(130.89877319335938, -91.5516357421875)
(130.67596435546875, -91.68856811523438)
(130.4382781982422, -91.78752136230469)
(130.18988037109375, -91.85250091552734)
(129.9317169189453, -91.90865325927734)
(129.66563415527344, -91.95079803466797)
(129.39283752441406, -91.97815704345703)
(129.11375427246094, -91.99077606201172)
(128.83163452148438, -91.98323822021484)
(128.54922485351562, -91.95309448242188)
(128.26744079589844, -91.90155792236328)
(127.99016571044922, -91.82622528076172)
(127.7192611694336, -91.7276840209961)
(127.45651245117188, -91.60661315917969)
(127.20589447021484, -91.46253967285156)
(126.96784973144531, -91.29733276367188)
(126.7451400756836, -91.11238098144531)
(126.53292083740234, -90.91165924072266)
(126.3302001953125, -90.69548034667969)
(126.13811492919922, -90.46318054199219)
(125.96222686767578, -90.21399688720703)
"""
coords = np.array([eval(line) for line in data_str.strip().split('\n')])
x = coords[:, 0]
y = coords[:, 1]

# 2. Select the points forming the first right turn
# The action [-1, 1] is a right turn. We'll fit a circle to the first 20 points.
x_fit = x[:20]
y_fit = y[:20]
points_to_fit = np.c_[x_fit, y_fit]

# 3. Define the function for circle fitting
def calc_R(xc, yc, x, y):
    """ calculate the distance of each 2D points from the center (xc, yc) """
    return np.sqrt((x - xc)**2 + (y - yc)**2)

def f(c, x, y):
    """ calculate the algebraic distance between the data points and the mean circle """
    Ri = calc_R(*c, x, y)
    return Ri - Ri.mean()

# Initial guess for the center (mean of the points)
center_estimate = np.mean(points_to_fit, axis=0)
result = least_squares(f, center_estimate, args=(x_fit, y_fit))
xc_fit, yc_fit = result.x
Ri_fit = calc_R(xc_fit, yc_fit, x_fit, y_fit)
R_fit = Ri_fit.mean()

# 4. Visualization
plt.style.use('seaborn-v0_8-whitegrid')
fig, ax = plt.subplots(figsize=(10, 10))

# Plot the full trajectory
ax.plot(x, y, 'b--', lw=1.5, label='전체 주행 경로')

# Plot the points used for fitting
ax.plot(x_fit, y_fit, 'ro', markersize=8, label='피팅에 사용된 포인트 (우회전)')

# Plot the fitted circle
circle = plt.Circle((xc_fit, yc_fit), R_fit, color='limegreen', fill=False, lw=2, label=f'피팅된 원 (반지름: {R_fit:.2f} m)')
ax.add_artist(circle)

# Plot the center of the circle
ax.plot(xc_fit, yc_fit, 'gX', markersize=10, label=f'원의 중심: ({xc_fit:.1f}, {yc_fit:.1f})')

ax.set_aspect('equal', adjustable='box')
ax.set_xlabel("X-좌표 (m)")
ax.set_ylabel("Y-좌표 (m)")
ax.set_title("MetaUrban 차량 동역학 분석: 조향값에 따른 회전반경", fontsize=16)
ax.legend()
plt.gca().invert_xaxis() # Match the coordinate system direction
plt.savefig("turning_radius_analysis.png", dpi=300)

print(f"계산된 회전반경: {R_fit:.4f} meters")
print(f"계산된 원의 중심: ({xc_fit:.4f}, {yc_fit:.4f})")
print("Plot saved to turning_radius_analysis.png")